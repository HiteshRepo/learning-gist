Brute Force:
1. Find all possible permutations of the string.
2. Sort the permutations.
3. Return the kth (k-1) in the list.
4. How to find permutations recursively?
    1. For each index, run iteration for that index till end of list
    2. For each iteration of current index follow below steps
        1. Swap the index and current iteration position elements in the array/string
        2. Recursively call the function with increased index by 1
        3. Un-swap the index and the current iteration position
    3. Breaking clause: if index is equal to length of array, then store the current string in the results bucket


Optimal Solution:
1. Find number of blocks. Number of blocks is equal to length of the string.
2. Because the first number can be any of the digit in the array/string.
3. If the first digit is fixed, then the rest 3 digits combinations will make the required numbers.
4. So all digit in the given number can occupy the first place.
5. Hence number of blocks is equal to the number of digits in the given string.
6. Each block will have number of sequences that is equal to factorial of the length of string - 1.
7. Because after the first digit is fixed the sequences are formed by rest of the digits.
8. We know need to figure out in which block will our k fall.
9. k will fall in numberOfSequences/numberOfBlocks
10. by identifying in which block our k will fall, we fix our first digit.
11. Now we have to remove that digit from the given string and put it it our result string.
12. Then we have to recursively identify rest position of the remaining digits.
